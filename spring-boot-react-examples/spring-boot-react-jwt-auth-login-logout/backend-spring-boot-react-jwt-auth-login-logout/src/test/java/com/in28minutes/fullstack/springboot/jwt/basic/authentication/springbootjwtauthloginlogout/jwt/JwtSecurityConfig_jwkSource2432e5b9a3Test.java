// Test generated by RoostGPT for test dm-example-3 using AI Model gpt

package com.in28minutes.fullstack.springboot.jwt.basic.authentication.springbootjwtauthloginlogout.jwt;

import com.nimbusds.jose.jwk.JWKMatcher;
import com.nimbusds.jose.jwk.JWKSelector;
import com.nimbusds.jose.jwk.source.JWKSource;
import com.nimbusds.jose.proc.SecurityContext;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.security.oauth2.jwt.Jwt;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class JwtSecurityConfig_jwkSource2432e5b9a3Test {

    private JwtSecurityConfig jwtSecurityConfig;
    private JWKSource<SecurityContext> jwkSource;

    @BeforeEach
    public void setUp() {
        jwtSecurityConfig = new JwtSecurityConfig();
        jwkSource = jwtSecurityConfig.jwkSource();
    }

    @Test
    public void testJwkSource_withValidJWKSelector_shouldReturnMatchingKeys() {
        // Given
        JWKSelector jwkSelector = new JWKSelector(new JWKMatcher.Builder().build());

        // When
        var keys = jwkSource.get(jwkSelector, null);

        // Then
        assertEquals(1, keys.size());
    }

    @Test
    public void testJwkSource_withInvalidJWKSelector_shouldReturnEmptyList() {
        // Given
        JWKSelector jwkSelector = new JWKSelector(new JWKMatcher.Builder().keyID("invalid").build());

        // When
        var keys = jwkSource.get(jwkSelector, null);

        // Then
        assertEquals(0, keys.size());
    }
}