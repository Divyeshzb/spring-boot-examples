// Test generated by RoostGPT for test dm-example-3 using AI Model gpt

package com.in28minutes.fullstack.springboot.jwt.basic.authentication.springbootjwtauthloginlogout.jwt;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;

public class JwtAuthenticationController_generateToken59932d6f7dTest {

    @InjectMocks
    JwtAuthenticationController jwtAuthenticationController;

    @Mock
    AuthenticationManager authenticationManager;

    @Mock
    TokenService tokenService;

    @Mock
    JwtTokenRequest jwtTokenRequest;

    @Mock
    JwtTokenResponse jwtTokenResponse;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGenerateToken_Success() {
        when(jwtTokenRequest.username()).thenReturn("testUser");
        when(jwtTokenRequest.password()).thenReturn("testPassword");

        UsernamePasswordAuthenticationToken authenticationToken =
                new UsernamePasswordAuthenticationToken(
                        jwtTokenRequest.username(),
                        jwtTokenRequest.password());

        when(authenticationManager.authenticate(authenticationToken)).thenReturn(authenticationToken);

        when(tokenService.generateToken(authenticationToken)).thenReturn("testToken");

        when(jwtTokenResponse.getToken()).thenReturn("testToken");

        ResponseEntity<JwtTokenResponse> responseEntity = jwtAuthenticationController.generateToken(jwtTokenRequest);

        assertEquals(ResponseEntity.ok(jwtTokenResponse), responseEntity);
    }

    @Test
    public void testGenerateToken_Failure() {
        when(jwtTokenRequest.username()).thenReturn("testUser");
        when(jwtTokenRequest.password()).thenReturn("wrongPassword");

        UsernamePasswordAuthenticationToken authenticationToken =
                new UsernamePasswordAuthenticationToken(
                        jwtTokenRequest.username(),
                        jwtTokenRequest.password());

        when(authenticationManager.authenticate(authenticationToken)).thenReturn(null);

        ResponseEntity<JwtTokenResponse> responseEntity = jwtAuthenticationController.generateToken(jwtTokenRequest);

        assertEquals(ResponseEntity.status(401).build(), responseEntity);
    }
}