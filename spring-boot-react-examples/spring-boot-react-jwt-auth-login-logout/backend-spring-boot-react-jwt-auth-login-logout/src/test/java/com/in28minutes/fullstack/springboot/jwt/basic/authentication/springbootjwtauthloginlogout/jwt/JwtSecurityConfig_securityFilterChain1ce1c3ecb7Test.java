// Test generated by RoostGPT for test dm-example-3 using AI Model gpt

package com.in28minutes.fullstack.springboot.jwt.basic.authentication.springbootjwtauthloginlogout.jwt;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.security.web.util.matcher.RequestMatcher;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

public class JwtSecurityConfig_securityFilterChain1ce1c3ecb7Test {

    @Mock
    private HttpSecurity httpSecurity;

    @InjectMocks
    private JwtSecurityConfig jwtSecurityConfig;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testSecurityFilterChain_authenticatedRequest() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setServletPath("/authenticatedPath");
        RequestMatcher requestMatcher = new AntPathRequestMatcher("/authenticatedPath");

        when(httpSecurity.authorizeRequests()).thenReturn(null);
        when(httpSecurity.requestMatcher(requestMatcher)).thenReturn(httpSecurity);
        when(httpSecurity.build()).thenReturn(null);

        SecurityFilterChain result = jwtSecurityConfig.securityFilterChain(httpSecurity);
        assertNotNull(result);
    }

    @Test
    public void testSecurityFilterChain_unauthenticatedRequest() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setServletPath("/authenticate");
        RequestMatcher requestMatcher = new AntPathRequestMatcher("/authenticate");

        when(httpSecurity.authorizeRequests()).thenReturn(null);
        when(httpSecurity.requestMatcher(requestMatcher)).thenReturn(httpSecurity);
        when(httpSecurity.build()).thenReturn(null);

        SecurityFilterChain result = jwtSecurityConfig.securityFilterChain(httpSecurity);
        assertNotNull(result);
    }
}