// Test generated by RoostGPT for test dm-example-3 using AI Model gpt

package com.in28minutes.fullstack.springboot.jwt.basic.authentication.springbootjwtauthloginlogout.jwt;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.InjectMocks;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class JwtAuthenticationController_JwtAuthenticationControllerfcb634bc13Test {

    @Mock
    private JwtTokenService tokenService;

    @Mock
    private AuthenticationManager authenticationManager;

    @InjectMocks
    private JwtAuthenticationController jwtAuthenticationController;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testJwtAuthenticationControllerInitialization() {
        // When
        JwtAuthenticationController controller = new JwtAuthenticationController(tokenService, authenticationManager);

        // Then
        assertNotNull(controller);
    }

    @Test
    public void testJwtAuthenticationControllerWithNullTokenService() {
        // When
        Exception exception = assertThrows(NullPointerException.class, () -> {
            new JwtAuthenticationController(null, authenticationManager);
        });

        // Then
        assertEquals("JwtTokenService cannot be null", exception.getMessage());
    }

    @Test
    public void testJwtAuthenticationControllerWithNullAuthenticationManager() {
        // When
        Exception exception = assertThrows(NullPointerException.class, () -> {
            new JwtAuthenticationController(tokenService, null);
        });

        // Then
        assertEquals("AuthenticationManager cannot be null", exception.getMessage());
    }
}