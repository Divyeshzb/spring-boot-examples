// Test generated by RoostGPT for test dm-java-example1 using AI Model gpt

package com.in28minutes.springboot.rest.example.student;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.ResponseEntity;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.net.URI;
import java.util.Optional;

import com.in28minutes.springboot.rest.example.student.Student;
import com.in28minutes.springboot.rest.example.student.StudentResource;
import com.in28minutes.springboot.rest.example.student.StudentRepository;

@SpringBootTest
public class StudentResource_updateStudent3007a464c6Test {
    
    @InjectMocks
    private StudentResource studentResource;
    
    @Mock
    private StudentRepository studentRepository;
    
    @Test
    public void testUpdateStudent_whenStudentExists() {
        Student student = new Student("John Doe", "john.doe@example.com");
        student.setId(1L);
        when(studentRepository.findById(1L)).thenReturn(Optional.of(student));
        ResponseEntity<Object> responseEntity = studentResource.updateStudent(student, 1L);
        assertEquals(204, responseEntity.getStatusCodeValue());
    }

    @Test
    public void testUpdateStudent_whenStudentDoesNotExist() {
        Student student = new Student("John Doe", "john.doe@example.com");
        student.setId(1L);
        when(studentRepository.findById(1L)).thenReturn(Optional.empty());
        ResponseEntity<Object> responseEntity = studentResource.updateStudent(student, 1L);
        assertEquals(404, responseEntity.getStatusCodeValue());
    }
}